@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject IAuthorizationService AuthorizationService
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "Danh sách lớp học";

}

@model IEnumerable<Class>

<div class="container-fluid mt-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="@Url.Action("Index", "Dashboard")" class="text-decoration-none">
                    <i class="bi bi-house-door"></i> Back to Dashborad
                </a>
            </li>

        </ol>
    </nav>

    <div class="card">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="card-title">Danh sách lớp học</h2>
                @* Người dùng có policy  CanManageClasses thì mới hiển thị button Thêm lớp học*@
                @if ((await AuthorizationService.AuthorizeAsync(User, "CanManageClasses")).Succeeded)
                {
                    <a href="@Url.Action("Add", "Class")" class="btn btn-primary">
                        <i class="bi bi-plus-circle me-2"></i>Thêm lớp học
                    </a>
                }
            </div>



            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">
                    @TempData["ErrorMessage"]
                </div>

            }
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">
                    @TempData["SuccessMessage"]
                </div>
            }

            <div class="table-responsive">
                <table class="table table-hover table-striped table-bordered">
                    <thead class="table-light">
                        <tr>
                            <th class="text-nowrap">Mã</th>
                            <th class="text-nowrap">Tên lớp học</th>
                            <th class="text-nowrap">Môn học</th>
                            <th class="text-nowrap">Phòng học</th>
                            <th class="text-nowrap">Lịch học</th>
                            <th class="text-nowrap">Sĩ số</th>
                            <th class="text-nowrap">Giảng viên</th>
                            <th class="text-nowrap">Trạng thái</th>
                            <th class="text-nowrap">Ngày bắt đầu</th>
                            <th class="text-nowrap">Ngày kết thúc</th>
                            <th class="text-nowrap">Học phí</th>
                            <th class="text-nowrap">Thao tác</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td class="text-nowrap">@item.Id</td>
                                <td class="text-nowrap">@item.Name</td>
                                <td class="text-nowrap">@item.Course.Name</td>
                                <td class="text-nowrap">@item.RoomNumber</td>
                                <td class="text-nowrap">
                                    @foreach (var classSchedule in item.ClassSchedules)
                                    {
                                        var dayName = classSchedule.Day switch
                                        {
                                            DayOfWeek.Sunday => "Chủ nhật",
                                            DayOfWeek.Monday => "Thứ hai",
                                            DayOfWeek.Tuesday => "Thứ ba",
                                            DayOfWeek.Wednesday => "Thứ tư",
                                            DayOfWeek.Thursday => "Thứ năm",
                                            DayOfWeek.Friday => "Thứ sáu",
                                            DayOfWeek.Saturday => "Thứ bảy",
                                            _ => classSchedule.Day.ToString()
                                        };
                                        @($"{dayName} {classSchedule.StartTime:HH:mm}-{classSchedule.EndTime:HH:mm}") <br />
                                    }
                                </td>
                                <td class="text-nowrap">@item.NumberOfStudents / @item.Capacity</td>
                                <td class="text-nowrap">@foreach (var lecturer in item.Lecturers)
                                    {
                                        @lecturer.Name <br />
                                    }</td>
                                <td class="text-nowrap">
                                    @{
                                        var statusClass = item.Status switch
                                        {
                                            ClassStatus.Pending => "text-warning",
                                            ClassStatus.Open => "text-success",
                                            ClassStatus.InProgress => "text-primary",
                                            ClassStatus.PaymentPending => "text-danger",
                                            ClassStatus.Archived => "text-secondary",
                                            _ => ""
                                        };
                                        var status = item.Status switch
                                        {
                                            ClassStatus.Pending => "Đang chờ",
                                            ClassStatus.Open => "Mở",
                                            ClassStatus.InProgress => "Đang học",
                                            ClassStatus.PaymentPending => "Chờ thanh toán",
                                            ClassStatus.Archived => "Đã lưu trữ",
                                            _ => item.Status.ToString()
                                        };
                                    }
                                    <span class="@statusClass">@status</span>
                                </td>
                                <td class="text-nowrap">@item.StartDate.ToString("dd/MM/yyyy")</td>
                                <td class="text-nowrap">@item.EndDate.ToString("dd/MM/yyyy")</td>
                                <td class="text-nowrap">@item.Tuition.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</td>                                <td>
                                    @* Người dùng có policy CanManageClasses thì mới hiển thị nút Sửa / Xoá lớp học *@
                                    @if (User != null && (await AuthorizationService.AuthorizeAsync(User, "CanManageClasses")).Succeeded)
                                    {
                                        <a class="btn btn-sm btn-outline-primary"
                                        href="@Url.Action("Edit", "Class", new { id = item.Id })">
                                            <i class="bi bi-pencil"></i> Sửa
                                        </a>
                                        @* Conditional forms based on class status *@
                                        @if (item.Status == ClassStatus.Pending)
                                        {
                                            <form method="post" action="@Url.Action("ChangeStatus", "Class")" style="display:inline;">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@item.Id" />
                                                <input type="hidden" name="newStatus" value="Open" />
                                                <button type="submit" class="btn btn-sm btn-outline-success">
                                                    <i class="bi bi-arrow-up-circle"></i> Đăng
                                                </button>
                                            </form>
                                        }
                                        else if (item.Status == ClassStatus.Open)
                                        {
                                            <form method="post" action="@Url.Action("ChangeStatus", "Class")" style="display:inline;">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@item.Id" />
                                                <input type="hidden" name="newStatus" value="InProgress" />
                                                <button type="submit" class="btn btn-sm btn-outline-success">
                                                    <i class="bi bi-arrow-up-circle"></i> Khai giảng
                                                </button>
                                            </form>
                                        }
                                        else if (item.Status == ClassStatus.InProgress)
                                        {
                                            <form method="post" action="@Url.Action("ChangeStatus", "Class")" style="display:inline;">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@item.Id" />
                                                <input type="hidden" name="newStatus" value="PaymentPending" />
                                                <button type="submit" class="btn btn-sm btn-outline-success">
                                                    <i class="bi bi-arrow-up-circle"></i> Chờ thanh toán
                                                </button>
                                            </form>
                                        }
                                        else if (item.Status == ClassStatus.PaymentPending)
                                        {
                                            <form method="post" action="@Url.Action("ChangeStatus", "Class")" style="display:inline;">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@item.Id" />
                                                <input type="hidden" name="newStatus" value="Archived" />
                                                <button type="submit" class="btn btn-sm btn-outline-success">
                                                    <i class="bi bi-arrow-up-circle"></i> Lưu trữ
                                                </button>
                                            </form>
                                        } else {
                                            <form method="post" action="@Url.Action("ChangeStatus", "Class")" style="display:inline;">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@item.Id" />
                                                <input type="hidden" name="newStatus" value="Pending" />
                                                <button type="submit" class="btn btn-sm btn-outline-success">
                                                    <i class="bi bi-arrow-up-circle"></i> Chờ
                                                </button>
                                            </form>
                                        }
                                        <form method="post" action="@Url.Action("Delete", "Class")" style="display:inline;">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="Id" value="@item.Id" />
                                            <button type="submit" class="btn btn-sm btn-outline-danger">
                                                <i class="bi bi-trash"></i> Xóa
                                            </button>
                                        </form>
                                    }
                                    @if (User != null && (await AuthorizationService.AuthorizeAsync(User, "IsLecturer")).Succeeded)
                                    {
                                        var lecturer = await UserManager.GetUserAsync(User);
                                        if (item.Lecturers.Any(l => l.Id == lecturer.Id))
                                        {
                                            <form method="post" action="@Url.Action("CancelTeaching", "Class")" style="display:inline;">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="classId" value="@item.Id" />
                                                <button type="submit" class="btn btn-sm btn-outline-danger">
                                                    <i class="bi bi-person-x"></i> Hủy dạy
                                                </button>
                                            </form>
                                        }
                                        else 
                                        {
                                            <form method="post" action="@Url.Action("RegisterToTeach", "Class")" style="display:inline;">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="classId" value="@item.Id" />
                                                <button type="submit" class="btn btn-sm btn-outline-success">
                                                    <i class="bi bi-person-check"></i> Đăng ký dạy
                                                </button>
                                            </form>
                                        }
                                    }

                                    @if (User != null && (await AuthorizationService.AuthorizeAsync(User, "IsStudent")).Succeeded)
                                    {
                                        var student = await UserManager.GetUserAsync(User);
                                        if (item.Students.Any(s => s.Id == student.Id))
                                        {
                                            <form method="post" action="@Url.Action("CancelEnrollment", "Class")" style="display:inline;">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="classId" value="@item.Id" />
                                                <button type="submit" class="btn btn-sm btn-outline-danger">
                                                    <i class="bi bi-journal-x"></i> Hủy học
                                                </button>
                                            </form>
                                        }
                                        else
                                        {
                                            <form method="post" action="@Url.Action("Enroll", "Class")" style="display:inline;">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="classId" value="@item.Id" />
                                                <button type="submit" class="btn btn-sm btn-outline-success">
                                                    <i class="bi bi-journal-check"></i> Đăng ký học
                                                </button>
                                            </form>
                                        }
                                    }
                                    else if (User?.Identity?.IsAuthenticated != true)
                                    {
                                        <a class="btn btn-sm btn-outline-info" asp-area="Identity" asp-page="/Account/Register">
                                            <i class="bi bi-journal-check"></i> Đăng ký học
                                        </a>
                                    }

                                </td>
                            </tr>
                        }
                    </tbody>

                </table>
            </div>
        </div>
    </div>
</div>